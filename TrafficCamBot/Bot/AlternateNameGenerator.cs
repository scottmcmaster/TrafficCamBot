using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;

namespace TrafficCamBot.Bot
{
    /// <summary>
    /// Generates alternate camera names that the user might type instead of the "official" camera name.
    /// </summary>
    public class AlternateNameGenerator
    {
        #region USPS Street Suffix Abbreviations alternates -- note these are generated by a tool.
        private readonly IList<string> ALY_ALTS = ImmutableList.Create("allee", "allee.", "alley", "ally", "ally.", "aly", "aly.");
        private readonly IList<string> ANX_ALTS = ImmutableList.Create("anex", "annex", "annex.", "annx", "annx.", "anx", "anx.");
        private readonly IList<string> ARC_ALTS = ImmutableList.Create("arc", "arc.", "arcade");
        private readonly IList<string> AVE_ALTS = ImmutableList.Create("av", "av.", "ave", "ave.", "aven", "aven.", "avenu", "avenu.", "avenue", "avn", "avn.", "avnue", "avnue.");
        private readonly IList<string> BYU_ALTS = ImmutableList.Create("bayoo", "bayoo.", "bayou");
        private readonly IList<string> BCH_ALTS = ImmutableList.Create("bch", "bch.", "beach");
        private readonly IList<string> BND_ALTS = ImmutableList.Create("bend", "bnd", "bnd.");
        private readonly IList<string> BLF_ALTS = ImmutableList.Create("blf", "blf.", "bluf", "bluf.", "bluff");
        private readonly IList<string> BLFS_ALTS = ImmutableList.Create("bluffs");
        private readonly IList<string> BTM_ALTS = ImmutableList.Create("bot", "bot.", "btm", "btm.", "bottm", "bottm.", "bottom");
        private readonly IList<string> BLVD_ALTS = ImmutableList.Create("blvd", "blvd.", "boul", "boul.", "boulevard", "boulv", "boulv.");
        private readonly IList<string> BR_ALTS = ImmutableList.Create("br", "br.", "brnch", "brnch.", "branch");
        private readonly IList<string> BRG_ALTS = ImmutableList.Create("brdge", "brdge.", "brg", "brg.", "bridge");
        private readonly IList<string> BRK_ALTS = ImmutableList.Create("brk", "brk.", "brook");
        private readonly IList<string> BRKS_ALTS = ImmutableList.Create("brooks");
        private readonly IList<string> BG_ALTS = ImmutableList.Create("burg");
        private readonly IList<string> BGS_ALTS = ImmutableList.Create("burgs");
        private readonly IList<string> BYP_ALTS = ImmutableList.Create("byp", "byp.", "bypa", "bypa.", "bypas", "bypas.", "bypass", "byps", "byps.");
        private readonly IList<string> CP_ALTS = ImmutableList.Create("camp", "cp", "cp.", "cmp", "cmp.");
        private readonly IList<string> CYN_ALTS = ImmutableList.Create("canyn", "canyn.", "canyon", "cnyn", "cnyn.");
        private readonly IList<string> CPE_ALTS = ImmutableList.Create("cape", "cpe", "cpe.");
        private readonly IList<string> CSWY_ALTS = ImmutableList.Create("causeway", "causwa", "causwa.", "cswy", "cswy.");
        private readonly IList<string> CTR_ALTS = ImmutableList.Create("cen", "cen.", "cent", "cent.", "center", "centr", "centr.", "centre", "centre.", "cnter", "cnter.", "cntr", "cntr.", "ctr", "ctr.");
        private readonly IList<string> CTRS_ALTS = ImmutableList.Create("centers");
        private readonly IList<string> CIR_ALTS = ImmutableList.Create("cir", "cir.", "circ", "circ.", "circl", "circl.", "circle", "crcl", "crcl.", "crcle", "crcle.");
        private readonly IList<string> CIRS_ALTS = ImmutableList.Create("circles");
        private readonly IList<string> CLF_ALTS = ImmutableList.Create("clf", "clf.", "cliff");
        private readonly IList<string> CLFS_ALTS = ImmutableList.Create("clfs", "clfs.", "cliffs");
        private readonly IList<string> CLB_ALTS = ImmutableList.Create("clb", "clb.", "club");
        private readonly IList<string> CMN_ALTS = ImmutableList.Create("common");
        private readonly IList<string> CMNS_ALTS = ImmutableList.Create("commons");
        private readonly IList<string> COR_ALTS = ImmutableList.Create("cor", "cor.", "corner");
        private readonly IList<string> CORS_ALTS = ImmutableList.Create("corners", "cors", "cors.");
        private readonly IList<string> CRSE_ALTS = ImmutableList.Create("course", "crse", "crse.");
        private readonly IList<string> CT_ALTS = ImmutableList.Create("court", "ct", "ct.");
        private readonly IList<string> CTS_ALTS = ImmutableList.Create("courts", "cts", "cts.");
        private readonly IList<string> CV_ALTS = ImmutableList.Create("cove", "cv", "cv.");
        private readonly IList<string> CVS_ALTS = ImmutableList.Create("coves");
        private readonly IList<string> CRK_ALTS = ImmutableList.Create("creek", "crk", "crk.");
        private readonly IList<string> CRES_ALTS = ImmutableList.Create("crescent", "cres", "cres.", "crsent", "crsent.", "crsnt", "crsnt.");
        private readonly IList<string> CRST_ALTS = ImmutableList.Create("crest");
        private readonly IList<string> XING_ALTS = ImmutableList.Create("crossing", "crssng", "crssng.", "xing", "xing.");
        private readonly IList<string> XRD_ALTS = ImmutableList.Create("crossroad");
        private readonly IList<string> XRDS_ALTS = ImmutableList.Create("crossroads");
        private readonly IList<string> CURV_ALTS = ImmutableList.Create("curve");
        private readonly IList<string> DL_ALTS = ImmutableList.Create("dale", "dl", "dl.");
        private readonly IList<string> DM_ALTS = ImmutableList.Create("dam", "dm", "dm.");
        private readonly IList<string> DV_ALTS = ImmutableList.Create("div", "div.", "divide", "dv", "dv.", "dvd", "dvd.");
        private readonly IList<string> DR_ALTS = ImmutableList.Create("dr", "dr.", "driv", "driv.", "drive", "drv", "drv.");
        private readonly IList<string> DRS_ALTS = ImmutableList.Create("drives");
        private readonly IList<string> EST_ALTS = ImmutableList.Create("est", "est.", "estate");
        private readonly IList<string> ESTS_ALTS = ImmutableList.Create("estates", "ests", "ests.");
        private readonly IList<string> EXPY_ALTS = ImmutableList.Create("exp", "exp.", "expr", "expr.", "express", "express.", "expressway", "expw", "expw.", "expy", "expy.");
        private readonly IList<string> EXT_ALTS = ImmutableList.Create("ext", "ext.", "extension", "extn", "extn.", "extnsn", "extnsn.");
        private readonly IList<string> EXTS_ALTS = ImmutableList.Create("exts", "exts.");
        private readonly IList<string> FALL_ALTS = ImmutableList.Create("fall");
        private readonly IList<string> FLS_ALTS = ImmutableList.Create("falls", "fls", "fls.");
        private readonly IList<string> FRY_ALTS = ImmutableList.Create("ferry", "frry", "frry.", "fry", "fry.");
        private readonly IList<string> FLD_ALTS = ImmutableList.Create("field", "fld", "fld.");
        private readonly IList<string> FLDS_ALTS = ImmutableList.Create("fields", "flds", "flds.");
        private readonly IList<string> FLT_ALTS = ImmutableList.Create("flat", "flt", "flt.");
        private readonly IList<string> FLTS_ALTS = ImmutableList.Create("flats", "flts", "flts.");
        private readonly IList<string> FRD_ALTS = ImmutableList.Create("ford", "frd", "frd.");
        private readonly IList<string> FRDS_ALTS = ImmutableList.Create("fords");
        private readonly IList<string> FRST_ALTS = ImmutableList.Create("forest", "forests", "forests.", "frst", "frst.");
        private readonly IList<string> FRG_ALTS = ImmutableList.Create("forg", "forg.", "forge", "frg", "frg.");
        private readonly IList<string> FRGS_ALTS = ImmutableList.Create("forges");
        private readonly IList<string> FRK_ALTS = ImmutableList.Create("fork", "frk", "frk.");
        private readonly IList<string> FRKS_ALTS = ImmutableList.Create("forks", "frks", "frks.");
        private readonly IList<string> FT_ALTS = ImmutableList.Create("fort", "frt", "frt.", "ft", "ft.");
        private readonly IList<string> FWY_ALTS = ImmutableList.Create("freeway", "freewy", "freewy.", "frway", "frway.", "frwy", "frwy.", "fwy", "fwy.");
        private readonly IList<string> GDN_ALTS = ImmutableList.Create("garden", "gardn", "gardn.", "grden", "grden.", "grdn", "grdn.");
        private readonly IList<string> GDNS_ALTS = ImmutableList.Create("gardens", "gdns", "gdns.", "grdns", "grdns.");
        private readonly IList<string> GTWY_ALTS = ImmutableList.Create("gateway", "gatewy", "gatewy.", "gatway", "gatway.", "gtway", "gtway.", "gtwy", "gtwy.");
        private readonly IList<string> GLN_ALTS = ImmutableList.Create("glen", "gln", "gln.");
        private readonly IList<string> GLNS_ALTS = ImmutableList.Create("glens");
        private readonly IList<string> GRN_ALTS = ImmutableList.Create("green", "grn", "grn.");
        private readonly IList<string> GRNS_ALTS = ImmutableList.Create("greens");
        private readonly IList<string> GRV_ALTS = ImmutableList.Create("grov", "grov.", "grove", "grv", "grv.");
        private readonly IList<string> GRVS_ALTS = ImmutableList.Create("groves");
        private readonly IList<string> HBR_ALTS = ImmutableList.Create("harb", "harb.", "harbor", "harbr", "harbr.", "hbr", "hbr.", "hrbor", "hrbor.");
        private readonly IList<string> HBRS_ALTS = ImmutableList.Create("harbors");
        private readonly IList<string> HVN_ALTS = ImmutableList.Create("haven", "hvn", "hvn.");
        private readonly IList<string> HTS_ALTS = ImmutableList.Create("ht", "ht.", "hts", "hts.");
        private readonly IList<string> HWY_ALTS = ImmutableList.Create("highway", "highwy", "highwy.", "hiway", "hiway.", "hiwy", "hiwy.", "hway", "hway.", "hwy", "hwy.");
        private readonly IList<string> HL_ALTS = ImmutableList.Create("hill", "hl", "hl.");
        private readonly IList<string> HLS_ALTS = ImmutableList.Create("hills", "hls", "hls.");
        private readonly IList<string> HOLW_ALTS = ImmutableList.Create("hllw", "hllw.", "hollow", "hollows", "hollows.", "holw", "holw.", "holws", "holws.");
        private readonly IList<string> INLT_ALTS = ImmutableList.Create("inlt", "inlt.");
        private readonly IList<string> IS_ALTS = ImmutableList.Create("is", "is.", "island", "islnd", "islnd.");
        private readonly IList<string> ISS_ALTS = ImmutableList.Create("islands", "islnds", "islnds.", "iss", "iss.");
        private readonly IList<string> ISLE_ALTS = ImmutableList.Create("isle", "isles", "isles.");
        private readonly IList<string> JCT_ALTS = ImmutableList.Create("jct", "jct.", "jction", "jction.", "jctn", "jctn.", "junction", "junctn", "junctn.", "juncton", "juncton.");
        private readonly IList<string> JCTS_ALTS = ImmutableList.Create("jctns", "jctns.", "jcts", "jcts.", "junctions");
        private readonly IList<string> KY_ALTS = ImmutableList.Create("key", "ky", "ky.");
        private readonly IList<string> KYS_ALTS = ImmutableList.Create("keys", "kys", "kys.");
        private readonly IList<string> KNL_ALTS = ImmutableList.Create("knl", "knl.", "knol", "knol.", "knoll");
        private readonly IList<string> KNLS_ALTS = ImmutableList.Create("knls", "knls.", "knolls");
        private readonly IList<string> LK_ALTS = ImmutableList.Create("lk", "lk.", "lake");
        private readonly IList<string> LKS_ALTS = ImmutableList.Create("lks", "lks.", "lakes");
        private readonly IList<string> LAND_ALTS = ImmutableList.Create("land");
        private readonly IList<string> LNDG_ALTS = ImmutableList.Create("landing", "lndg", "lndg.", "lndng", "lndng.");
        private readonly IList<string> LN_ALTS = ImmutableList.Create("lane", "ln", "ln.");
        private readonly IList<string> LGT_ALTS = ImmutableList.Create("lgt", "lgt.", "light");
        private readonly IList<string> LGTS_ALTS = ImmutableList.Create("lights");
        private readonly IList<string> LF_ALTS = ImmutableList.Create("lf", "lf.", "loaf");
        private readonly IList<string> LCK_ALTS = ImmutableList.Create("lck", "lck.", "lock");
        private readonly IList<string> LCKS_ALTS = ImmutableList.Create("lcks", "lcks.", "locks");
        private readonly IList<string> LDG_ALTS = ImmutableList.Create("ldg", "ldg.", "ldge", "ldge.", "lodg", "lodg.", "lodge");
        private readonly IList<string> LOOP_ALTS = ImmutableList.Create("loop", "loops", "loops.");
        private readonly IList<string> MALL_ALTS = ImmutableList.Create("mall");
        private readonly IList<string> MNR_ALTS = ImmutableList.Create("mnr", "mnr.", "manor");
        private readonly IList<string> MNRS_ALTS = ImmutableList.Create("manors", "mnrs", "mnrs.");
        private readonly IList<string> MDW_ALTS = ImmutableList.Create("meadow");
        private readonly IList<string> MDWS_ALTS = ImmutableList.Create("mdw", "mdw.", "mdws", "mdws.", "meadows", "medows", "medows.");
        private readonly IList<string> MEWS_ALTS = ImmutableList.Create("mews");
        private readonly IList<string> ML_ALTS = ImmutableList.Create("mill");
        private readonly IList<string> MLS_ALTS = ImmutableList.Create("mills");
        private readonly IList<string> MSN_ALTS = ImmutableList.Create("missn", "missn.", "mssn", "mssn.");
        private readonly IList<string> MTWY_ALTS = ImmutableList.Create("motorway");
        private readonly IList<string> MT_ALTS = ImmutableList.Create("mnt", "mnt.", "mt", "mt.", "mount");
        private readonly IList<string> MTN_ALTS = ImmutableList.Create("mntain", "mntain.", "mntn", "mntn.", "mountain", "mountin", "mountin.", "mtin", "mtin.", "mtn", "mtn.");
        private readonly IList<string> MTNS_ALTS = ImmutableList.Create("mntns", "mntns.", "mountains");
        private readonly IList<string> NCK_ALTS = ImmutableList.Create("nck", "nck.", "neck");
        private readonly IList<string> ORCH_ALTS = ImmutableList.Create("orch", "orch.", "orchard", "orchrd", "orchrd.");
        private readonly IList<string> OVAL_ALTS = ImmutableList.Create("oval", "ovl", "ovl.");
        private readonly IList<string> OPAS_ALTS = ImmutableList.Create("overpass");
        private readonly IList<string> PARK_ALTS = ImmutableList.Create("park", "prk", "prk.", "parks");
        private readonly IList<string> PKWY_ALTS = ImmutableList.Create("parkway", "parkwy", "parkwy.", "pkway", "pkway.", "pkwy", "pkwy.", "pky", "pky.", "parkways", "pkwys", "pkwys.");
        private readonly IList<string> PASS_ALTS = ImmutableList.Create("pass");
        private readonly IList<string> PSGE_ALTS = ImmutableList.Create("passage");
        private readonly IList<string> PATH_ALTS = ImmutableList.Create("path", "paths", "paths.");
        private readonly IList<string> PIKE_ALTS = ImmutableList.Create("pike", "pikes", "pikes.");
        private readonly IList<string> PNE_ALTS = ImmutableList.Create("pine");
        private readonly IList<string> PNES_ALTS = ImmutableList.Create("pines", "pnes", "pnes.");
        private readonly IList<string> PL_ALTS = ImmutableList.Create("pl", "pl.");
        private readonly IList<string> PLN_ALTS = ImmutableList.Create("plain", "pln", "pln.");
        private readonly IList<string> PLNS_ALTS = ImmutableList.Create("plains", "plns", "plns.");
        private readonly IList<string> PLZ_ALTS = ImmutableList.Create("plaza", "plz", "plz.", "plza", "plza.");
        private readonly IList<string> PT_ALTS = ImmutableList.Create("point", "pt", "pt.");
        private readonly IList<string> PTS_ALTS = ImmutableList.Create("points", "pts", "pts.");
        private readonly IList<string> PRT_ALTS = ImmutableList.Create("port", "prt", "prt.");
        private readonly IList<string> PRTS_ALTS = ImmutableList.Create("ports", "prts", "prts.");
        private readonly IList<string> PR_ALTS = ImmutableList.Create("pr", "pr.", "prairie", "prr", "prr.");
        private readonly IList<string> RADL_ALTS = ImmutableList.Create("rad", "rad.", "radial", "radiel", "radiel.", "radl", "radl.");
        private readonly IList<string> RAMP_ALTS = ImmutableList.Create("ramp");
        private readonly IList<string> RNCH_ALTS = ImmutableList.Create("ranch", "ranches", "ranches.", "rnch", "rnch.", "rnchs", "rnchs.");
        private readonly IList<string> RPD_ALTS = ImmutableList.Create("rapid", "rpd", "rpd.");
        private readonly IList<string> RPDS_ALTS = ImmutableList.Create("rapids", "rpds", "rpds.");
        private readonly IList<string> RST_ALTS = ImmutableList.Create("rest", "rst", "rst.");
        private readonly IList<string> RDG_ALTS = ImmutableList.Create("rdg", "rdg.", "rdge", "rdge.", "ridge");
        private readonly IList<string> RDGS_ALTS = ImmutableList.Create("rdgs", "rdgs.", "ridges");
        private readonly IList<string> RIV_ALTS = ImmutableList.Create("riv", "riv.", "river", "rvr", "rvr.", "rivr", "rivr.");
        private readonly IList<string> RD_ALTS = ImmutableList.Create("rd", "rd.", "road");
        private readonly IList<string> RDS_ALTS = ImmutableList.Create("roads", "rds", "rds.");
        private readonly IList<string> RTE_ALTS = ImmutableList.Create("route");
        private readonly IList<string> ROW_ALTS = ImmutableList.Create("row");
        private readonly IList<string> RUE_ALTS = ImmutableList.Create("rue");
        private readonly IList<string> RUN_ALTS = ImmutableList.Create("run");
        private readonly IList<string> SHL_ALTS = ImmutableList.Create("shl", "shl.", "shoal");
        private readonly IList<string> SHLS_ALTS = ImmutableList.Create("shls", "shls.", "shoals");
        private readonly IList<string> SHR_ALTS = ImmutableList.Create("shoar", "shoar.", "shore", "shr", "shr.");
        private readonly IList<string> SHRS_ALTS = ImmutableList.Create("shoars", "shoars.", "shores", "shrs", "shrs.");
        private readonly IList<string> SKWY_ALTS = ImmutableList.Create("skyway");
        private readonly IList<string> SPG_ALTS = ImmutableList.Create("spg", "spg.", "spng", "spng.", "spring", "sprng", "sprng.");
        private readonly IList<string> SPGS_ALTS = ImmutableList.Create("spgs", "spgs.", "spngs", "spngs.", "springs", "sprngs", "sprngs.");
        private readonly IList<string> SPUR_ALTS = ImmutableList.Create("spur", "spurs");
        private readonly IList<string> SQ_ALTS = ImmutableList.Create("sq", "sq.", "sqr", "sqr.", "sqre", "sqre.", "squ", "squ.", "square");
        private readonly IList<string> SQS_ALTS = ImmutableList.Create("sqrs", "sqrs.", "squares");
        private readonly IList<string> STA_ALTS = ImmutableList.Create("sta", "sta.", "station", "statn", "statn.", "stn", "stn.");
        private readonly IList<string> STRA_ALTS = ImmutableList.Create("stra", "stra.", "strav", "strav.", "straven", "straven.", "stravenue", "stravn", "stravn.", "strvn", "strvn.", "strvnue", "strvnue.");
        private readonly IList<string> STRM_ALTS = ImmutableList.Create("stream", "streme", "streme.", "strm", "strm.");
        private readonly IList<string> ST_ALTS = ImmutableList.Create("street", "strt", "strt.", "st", "st.", "str", "str.");
        private readonly IList<string> STS_ALTS = ImmutableList.Create("streets");
        private readonly IList<string> SMT_ALTS = ImmutableList.Create("smt", "smt.", "sumit", "sumit.", "sumitt", "sumitt.", "summit");
        private readonly IList<string> TER_ALTS = ImmutableList.Create("ter", "ter.", "terr", "terr.", "terrace");
        private readonly IList<string> TRWY_ALTS = ImmutableList.Create("throughway");
        private readonly IList<string> TRCE_ALTS = ImmutableList.Create("trace", "traces", "traces.", "trce", "trce.");
        private readonly IList<string> TRAK_ALTS = ImmutableList.Create("track", "tracks", "tracks.", "trak", "trak.", "trk", "trk.", "trks", "trks.");
        private readonly IList<string> TRFY_ALTS = ImmutableList.Create("trafficway");
        private readonly IList<string> TRL_ALTS = ImmutableList.Create("trail", "trails", "trails.", "trl", "trl.", "trls", "trls.");
        private readonly IList<string> TRLR_ALTS = ImmutableList.Create("trailer", "trlr", "trlr.", "trlrs", "trlrs.");
        private readonly IList<string> TUNL_ALTS = ImmutableList.Create("tunel", "tunel.", "tunl", "tunl.", "tunls", "tunls.", "tunnel", "tunnels", "tunnels.", "tunnl", "tunnl.");
        private readonly IList<string> TPKE_ALTS = ImmutableList.Create("trnpk", "trnpk.", "turnpike", "turnpk", "turnpk.");
        private readonly IList<string> UPAS_ALTS = ImmutableList.Create("underpass");
        private readonly IList<string> UN_ALTS = ImmutableList.Create("un", "un.", "union");
        private readonly IList<string> UNS_ALTS = ImmutableList.Create("unions");
        private readonly IList<string> VLY_ALTS = ImmutableList.Create("valley", "vally", "vally.", "vlly", "vlly.", "vly", "vly.");
        private readonly IList<string> VLYS_ALTS = ImmutableList.Create("valleys", "vlys", "vlys.");
        private readonly IList<string> VIA_ALTS = ImmutableList.Create("vdct", "vdct.", "via", "via.", "viadct", "viadct.", "viaduct");
        private readonly IList<string> VW_ALTS = ImmutableList.Create("view", "vw", "vw.");
        private readonly IList<string> VWS_ALTS = ImmutableList.Create("views", "vws", "vws.");
        private readonly IList<string> VLG_ALTS = ImmutableList.Create("vill", "vill.", "villag", "villag.", "village", "villg", "villg.", "villiage", "villiage.", "vlg", "vlg.");
        private readonly IList<string> VLGS_ALTS = ImmutableList.Create("villages", "vlgs", "vlgs.");
        private readonly IList<string> VL_ALTS = ImmutableList.Create("ville", "vl", "vl.");
        private readonly IList<string> VIS_ALTS = ImmutableList.Create("vis", "vis.", "vist", "vist.", "vista", "vst", "vst.", "vsta", "vsta.");
        private readonly IList<string> WALK_ALTS = ImmutableList.Create("walk", "walks");
        private readonly IList<string> WALL_ALTS = ImmutableList.Create("wall");
        private readonly IList<string> WAY_ALTS = ImmutableList.Create("wy", "wy.", "way");
        private readonly IList<string> WAYS_ALTS = ImmutableList.Create("ways");
        private readonly IList<string> WL_ALTS = ImmutableList.Create("well");
        private readonly IList<string> WLS_ALTS = ImmutableList.Create("wells", "wls", "wls.");
        #endregion

        #region Directional alternates
        private readonly IList<string> NORTH_ALTS = ImmutableList.Create("north", "n", "n.");
        private readonly IList<string> SOUTH_ALTS = ImmutableList.Create("south", "s", "s.");
        private readonly IList<string> EAST_ALTS = ImmutableList.Create("east", "e", "e.");
        private readonly IList<string> WEST_ALTS = ImmutableList.Create("west", "w", "w.");
        private readonly IList<string> NORTHWEST_ALTS = ImmutableList.Create("northwest", "nw", "nw.");
        private readonly IList<string> SOUTHWEST_ALTS = ImmutableList.Create("southwest", "sw", "sw.");
        private readonly IList<string> SOUTHEAST_ALTS = ImmutableList.Create("southeast", "se", "se.");
        private readonly IList<string> NORTHEAST_ALTS = ImmutableList.Create("northeast", "ne", "ne.");
        private readonly IList<string> ROUTE_ALTS = ImmutableList.Create("route", "rte", "rte.");
        #endregion

        private readonly IDictionary<string, IList<string>> alternates;

        public AlternateNameGenerator()
        {
            var uspsAlternates = new List<IList<string>> { ALY_ALTS, ANX_ALTS, ARC_ALTS, AVE_ALTS, BYU_ALTS, BCH_ALTS, BND_ALTS, BLF_ALTS, BLFS_ALTS, BTM_ALTS, BLVD_ALTS, BR_ALTS, BRG_ALTS, BRK_ALTS, BRKS_ALTS, BG_ALTS, BGS_ALTS, BYP_ALTS, CP_ALTS, CYN_ALTS, CPE_ALTS, CSWY_ALTS, CTR_ALTS, CTRS_ALTS, CIR_ALTS, CIRS_ALTS, CLF_ALTS, CLFS_ALTS, CLB_ALTS, CMN_ALTS, CMNS_ALTS, COR_ALTS, CORS_ALTS, CRSE_ALTS, CT_ALTS, CTS_ALTS, CV_ALTS, CVS_ALTS, CRK_ALTS, CRES_ALTS, CRST_ALTS, XING_ALTS, XRD_ALTS, XRDS_ALTS, CURV_ALTS, DL_ALTS, DM_ALTS, DV_ALTS, DR_ALTS, DRS_ALTS, EST_ALTS, ESTS_ALTS, EXPY_ALTS, EXT_ALTS, EXTS_ALTS, FALL_ALTS, FLS_ALTS, FRY_ALTS, FLD_ALTS, FLDS_ALTS, FLT_ALTS, FLTS_ALTS, FRD_ALTS, FRDS_ALTS, FRST_ALTS, FRG_ALTS, FRGS_ALTS, FRK_ALTS, FRKS_ALTS, FT_ALTS, FWY_ALTS, GDN_ALTS, GDNS_ALTS, GTWY_ALTS, GLN_ALTS, GLNS_ALTS, GRN_ALTS, GRNS_ALTS, GRV_ALTS, GRVS_ALTS, HBR_ALTS, HBRS_ALTS, HVN_ALTS, HTS_ALTS, HWY_ALTS, HL_ALTS, HLS_ALTS, HOLW_ALTS, INLT_ALTS, IS_ALTS, ISS_ALTS, ISLE_ALTS, JCT_ALTS, JCTS_ALTS, KY_ALTS, KYS_ALTS, KNL_ALTS, KNLS_ALTS, LK_ALTS, LKS_ALTS, LAND_ALTS, LNDG_ALTS, LN_ALTS, LGT_ALTS, LGTS_ALTS, LF_ALTS, LCK_ALTS, LCKS_ALTS, LDG_ALTS, LOOP_ALTS, MALL_ALTS, MNR_ALTS, MNRS_ALTS, MDW_ALTS, MDWS_ALTS, MEWS_ALTS, ML_ALTS, MLS_ALTS, MSN_ALTS, MTWY_ALTS, MT_ALTS, MTN_ALTS, MTNS_ALTS, NCK_ALTS, ORCH_ALTS, OVAL_ALTS, OPAS_ALTS, PARK_ALTS, PKWY_ALTS, PASS_ALTS, PSGE_ALTS, PATH_ALTS, PIKE_ALTS, PNE_ALTS, PNES_ALTS, PL_ALTS, PLN_ALTS, PLNS_ALTS, PLZ_ALTS, PT_ALTS, PTS_ALTS, PRT_ALTS, PRTS_ALTS, PR_ALTS, RADL_ALTS, RAMP_ALTS, RNCH_ALTS, RPD_ALTS, RPDS_ALTS, RST_ALTS, RDG_ALTS, RDGS_ALTS, RIV_ALTS, RD_ALTS, RDS_ALTS, RTE_ALTS, ROW_ALTS, RUE_ALTS, RUN_ALTS, SHL_ALTS, SHLS_ALTS, SHR_ALTS, SHRS_ALTS, SKWY_ALTS, SPG_ALTS, SPGS_ALTS, SPUR_ALTS, SQ_ALTS, SQS_ALTS, STA_ALTS, STRA_ALTS, STRM_ALTS, ST_ALTS, STS_ALTS, SMT_ALTS, TER_ALTS, TRWY_ALTS, TRCE_ALTS, TRAK_ALTS, TRFY_ALTS, TRL_ALTS, TRLR_ALTS, TUNL_ALTS, TPKE_ALTS, UPAS_ALTS, UN_ALTS, UNS_ALTS, VLY_ALTS, VLYS_ALTS, VIA_ALTS, VW_ALTS, VWS_ALTS, VLG_ALTS, VLGS_ALTS, VL_ALTS, VIS_ALTS, WALK_ALTS, WALL_ALTS, WAY_ALTS, WAYS_ALTS, WL_ALTS, WLS_ALTS };
            var directionAlternates = new List<IList<string>>
            {
                NORTH_ALTS, SOUTH_ALTS, EAST_ALTS, WEST_ALTS, NORTHWEST_ALTS, SOUTHWEST_ALTS,
                NORTHEAST_ALTS, SOUTHEAST_ALTS
            };

            var allAlternates = new List<IList<string>>();
            allAlternates.AddRange(uspsAlternates);
            allAlternates.AddRange(directionAlternates);

            var builder = ImmutableDictionary.CreateBuilder<string, IList<string>>();
            foreach (var alternateSet in allAlternates)
            {
                foreach (var alternate in alternateSet)
                {
                    builder.Add(alternate, alternateSet);
                }
            }
            alternates = builder.ToImmutable();
        }

        public IDictionary<string, IList<string>> Alternates
        {
            get { return alternates; }
        }

        /// <summary>
        /// Gets a list of alternative reasonable names for the given camera name.
        /// </summary>
        /// <param name="cameraName"></param>
        /// <returns></returns>
        public IEnumerable<string> GenerateAlternateCameraNames(string cameraName)
        {
            var result = new List<string>();
            if (cameraName == null || cameraName.Trim().Length == 0)
            {
                yield break;
            }

            var tokens = cameraName.ToLower().Split(' ');

            // Build a list of sets of all alternates for each token in the given camera name search term.
            var tokenAlternates = new List<IList<string>>();
            foreach (var token in tokens)
            {
                if (alternates.ContainsKey(token))
                {
                    tokenAlternates.Add(alternates[token]);
                }
                else
                {
                    tokenAlternates.Add(new List<string> { token });
                }
            }

            // Enumerate all of the possible combinations of alternate tokens.
            var combinations = AllCombinationsOf<string>(tokenAlternates);
            foreach (List<string> combination in combinations)
            {
                yield return string.Join(" ", combination);
            }
        }

        /// <summary>
        /// See http://stackoverflow.com/questions/545703/combination-of-listlistint
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="sets"></param>
        /// <returns></returns>
        private List<List<T>> AllCombinationsOf<T>(List<IList<T>> sets)
        {
            var combinations = new List<List<T>>();

            // Prime the data
            foreach (var value in sets[0])
            {
                combinations.Add(new List<T> { value });
            }

            foreach (var set in sets.Skip(1))
            {
                combinations = AddExtraSet(combinations, set);
            }

            return combinations;
        }

        private static List<List<T>> AddExtraSet<T>
             (List<List<T>> combinations, IList<T> set)
        {
            var newCombinations = from value in set
                                  from combination in combinations
                                  select new List<T>(combination) { value };

            return newCombinations.ToList();
        }

    }
}